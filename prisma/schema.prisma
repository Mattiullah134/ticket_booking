// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN  
  STAFF  
  CUSTOMER  
}
model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  phone    String
  password String
  otp      String?
  bookings Booking[]
  comments Comment[]
  rating   Rating?
  userRole Role
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  otpExpire DateTime?
  theater   Theater?
}

model Theater {
  id       Int      @id @default(autoincrement())
  name     String
  address  String
  city     String
  zipcode  String
  state    String
  email    String   @unique
  screens  Screen[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  manager    User?    @relation(fields: [id], references: [id])
}
model Movie {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  genre       String   // Consider enum
  duration    String
  movieTrailer String?
  movieBanner String
  movieThumbnail String
  comments    Comment[]
  cast        Cast[]
  ratings     Rating[]
  showTime    ShowTime[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Screen {
  id       Int      @id @default(autoincrement())
  screen_no Int
  capacity Int
  theater   Theater @relation(fields: [theaterId], references: [id])
  theaterId Int
  seats     Seat[]
  showTime  ShowTime[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShowTime {
  id        Int      @id @default(autoincrement())
  showDate  DateTime
  price     Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  bookings  Booking[]
  screens   Screen[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seat {
  id       Int      @id @default(autoincrement())
  seatNo   String
  row      String
  columns  String
  screen    Screen @relation(fields: [screenId], references: [id])
  screenId  Int
  booking   Booking?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id       Int      @id @default(autoincrement())
  showTime ShowTime @relation(fields: [showTimeId], references: [id])
  showTimeId Int
  seat      Seat    @relation(fields: [seatId], references: [id])
  seatId    Int @unique()
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       Int      @id @default(autoincrement())
  title    String
  description String
  movie    Movie    @relation(fields: [movieId], references: [id])
  movieId  Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id       Int      @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int @unique()
  movie    Movie    @relation(fields: [movieId], references: [id])
  movieId  Int
  rating   Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt     
}

model Cast {
  id       Int      @id @default(autoincrement())
  name     String
  movie    Movie    @relation(fields: [movieId], references: [id])
  movieId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


